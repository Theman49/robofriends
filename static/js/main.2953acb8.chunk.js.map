{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","style","paddingTop","map","user","i","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","overflowY","border","height","children","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","this","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","marginTop","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","text","target","value","console","log","payload","fetch","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2953acb8.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n\treturn (\n\t\t<div className=\"bg-light-green pa3 ma2 dib br3 grow bw3  shadow-5 tc\">\n\t\t\t<img alt=\"robots\" src={`https://robohash.org/${props.id}?200x200`}/>\n\t\t\t<div>\n\t\t\t\t<h2>{props.name}</h2>\n\t\t\t\t<p>{props.email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\treturn (\n\t<div style={{ paddingTop: 20}}>\n\t\t{\n\t\t\trobots.map((user, i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Card \n\t\t\t\t\tkey={i} \n\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\temail={robots[i].email} \n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})\n\t\t}\n  \t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchField, searchChange}) => {\n\treturn (\n\t\t<div>\n\t\t\t<input \n\t\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\n\t\t\t\ttype=\"search\" \n\t\t\t\tplaceholder=\"serch robots\" \n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from \"react\";\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{ overflowY: \"scroll\", border: \"1px solid #333\", height: \"800px\"}}>\n\t\t\t{ props.children}\n\t\t</div>\n\t);\n}\n\nexport default Scroll;\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from \"../components/Scroll\";\n\nimport { setSearchField, requestRobots } from \"../actions\";\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots())\n\t}\n}\n\n\nclass App extends Component {\n\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots();\n\t}\n\n\trender() {\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t})\n\t\treturn isPending ?\n\n\t\t<h1 className=\"tc\" style={{ marginTop: 300}}>Loading</h1>:\n\n\t\t<div className=\"tc\">\n\t\t\t<h1 className=\"f1\">RoboFriends</h1>\n\t\t\t<SearchBox searchChange={onSearchChange}/>\n\t\t\t<Scroll>\n\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t</Scroll>\t\n\t\t</div>\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n\n} from \"./constants.js\";\n\nexport const setSearchField = (text) => {\n\tconsole.log(text);\n\treturn {\n\t\ttype: CHANGE_SEARCH_FIELD,\n\t\tpayload: text\n\t}\n}\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n\n} from \"./constants.js\";\n\nconst initialStateSearch = {\n\tsearchField: \"\"\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n\tconsole.log(action.type);\n\tswitch(action.type){\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\n\nconst initialStateRobots = {\n\tisPending: false,\n\trobots: [],\n\terror: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n\tswitch(action.type){\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn Object.assign({}, state, { isPending: true});\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false});\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false});\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<Provider store={store}>\n  \t\t<App />\n  \t</Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}